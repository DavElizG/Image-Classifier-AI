#!/usr/bin/env python
"""
Script de prueba para el Clasificador de Im√°genes con OpenAI.
Este script permite probar la API de clasificaci√≥n enviando una imagen al servidor.
"""

import requests
import argparse
import os
import sys
import json
from datetime import datetime

def test_api_connectivity(base_url):
    """Prueba la conectividad b√°sica con la API."""
    try:
        response = requests.get(f"{base_url}/")
        if response.status_code == 200:
            print("‚úÖ Conexi√≥n con la API exitosa")
            return True
        else:
            print(f"‚ùå Error al conectar con la API: {response.status_code}")
            return False
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        return False

def test_openai_connection(base_url):
    """Prueba la conexi√≥n con la API de OpenAI."""
    try:
        response = requests.get(f"{base_url}/api/test-openai")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Conexi√≥n con OpenAI exitosa: {data.get('model_response', '')}")
            return True
        else:
            print(f"‚ùå Error al conectar con OpenAI: {response.status_code}")
            print(response.json().get('message', 'No message provided'))
            return False
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        return False

def get_categories(base_url):
    """Obtiene las categor√≠as disponibles para clasificaci√≥n."""
    try:
        response = requests.get(f"{base_url}/api/categories")
        if response.status_code == 200:
            categories = response.json().get('categories', [])
            print(f"‚úÖ Categor√≠as disponibles: {', '.join(categories)}")
            return categories
        else:
            print(f"‚ùå Error al obtener categor√≠as: {response.status_code}")
            return []
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        return []

def classify_image(base_url, image_path):
    """Clasifica una imagen utilizando la API."""
    if not os.path.exists(image_path):
        print(f"‚ùå Error: El archivo {image_path} no existe")
        return None
    
    try:
        with open(image_path, 'rb') as image_file:
            files = {'file': (os.path.basename(image_path), image_file, 'image/jpeg')}
            response = requests.post(f"{base_url}/api/classify", files=files)
            
            if response.status_code == 200:
                result = response.json()
                print(f"‚úÖ Imagen clasificada como: {result.get('category', 'Unknown')}")
                print(f"   Confianza: {result.get('confidence', 0):.2f}%")
                return result
            else:
                print(f"‚ùå Error al clasificar imagen: {response.status_code}")
                print(response.json().get('error', 'No error message provided'))
                return None
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        return None

def get_stats(base_url, days=7):
    """Obtiene las estad√≠sticas de clasificaci√≥n."""
    try:
        response = requests.get(f"{base_url}/api/stats?days={days}")
        if response.status_code == 200:
            stats = response.json().get('stats', {})
            
            # Formatear y mostrar estad√≠sticas
            print(f"‚úÖ Estad√≠sticas de clasificaci√≥n:")
            print(f"   Total de clasificaciones: {stats.get('total_classifications', 0)}")
            
            # Mostrar estad√≠sticas por categor√≠a
            print("\n   Estad√≠sticas por categor√≠a:")
            categories = stats.get('categories', {})
            for category, data in categories.items():
                count = data.get('count', 0)
                avg_confidence = data.get('avg_confidence', 0)
                print(f"   - {category}: {count} im√°genes (confianza promedio: {avg_confidence:.2f}%)")
            
            # Mostrar estad√≠sticas diarias
            print("\n   Estad√≠sticas diarias:")
            daily = stats.get('daily', {})
            for date, data in sorted(daily.items()):
                total = data.get('total', 0)
                if total > 0:  # Solo mostrar d√≠as con clasificaciones
                    print(f"   - {date}: {total} clasificaciones")
            
            # Mostrar fecha de √∫ltima actualizaci√≥n
            last_updated = stats.get('last_updated', "")
            if last_updated:
                try:
                    # Convertir formato ISO a formato legible
                    dt = datetime.fromisoformat(last_updated)
                    formatted_date = dt.strftime("%d/%m/%Y %H:%M:%S")
                    print(f"\n   √öltima actualizaci√≥n: {formatted_date}")
                except ValueError:
                    print(f"\n   √öltima actualizaci√≥n: {last_updated}")
            
            return stats
        else:
            print(f"‚ùå Error al obtener estad√≠sticas: {response.status_code}")
            error_msg = response.json().get('error', 'No error message provided')
            print(f"   {error_msg}")
            return None
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        return None

def get_history(base_url, limit=10, offset=0, category=None):
    """Obtiene el historial de clasificaciones con im√°genes."""
    try:
        # Construir la URL con los par√°metros
        url = f"{base_url}/api/history?limit={limit}&offset={offset}"
        if category:
            url += f"&category={category}"
        
        response = requests.get(url)
        if response.status_code == 200:
            history_data = response.json()
            history = history_data.get('history', [])
            
            # Mostrar informaci√≥n del historial
            print(f"\n‚úÖ Historial de clasificaciones:")
            print(f"   Mostrando {len(history)} de {history_data.get('total', 0)} entradas")
            
            # Mostrar cada entrada del historial
            for i, entry in enumerate(history, 1):
                timestamp = entry.get('timestamp', '')
                try:
                    # Convertir formato ISO a formato legible
                    dt = datetime.fromisoformat(timestamp)
                    formatted_date = dt.strftime("%d/%m/%Y %H:%M:%S")
                except ValueError:
                    formatted_date = timestamp
                
                category = entry.get('category', 'desconocido')
                confidence = entry.get('confidence', 0)
                filename = entry.get('original_filename', 'desconocido')
                
                print(f"\n   {i}. {category} (confianza: {confidence:.2f}%)")
                print(f"      Archivo: {filename}")
                print(f"      Fecha: {formatted_date}")
                print(f"      ID: {entry.get('id', 'no-id')}")
                
                # Indicar que la imagen est√° disponible pero no mostrarla en consola
                if 'image_data' in entry:
                    print(f"      [Imagen disponible en base64]")
                else:
                    print(f"      [Imagen no disponible]")
            
            return history
        else:
            error_msg = response.json().get('error', 'No error message provided')
            print(f"‚ùå Error al obtener historial: {response.status_code} - {error_msg}")
            return None
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        return None

def main():
    parser = argparse.ArgumentParser(description="Prueba del Clasificador de Im√°genes con OpenAI")
    parser.add_argument("--url", default="http://localhost:5000", help="URL base de la API")
    parser.add_argument("--image", help="Ruta a la imagen para clasificar")
    parser.add_argument("--stats", action="store_true", help="Obtener estad√≠sticas de clasificaci√≥n")
    parser.add_argument("--days", type=int, default=7, help="N√∫mero de d√≠as para estad√≠sticas (1-30)")
    
    args = parser.parse_args()
    
    print("üîç Probando el Clasificador de Im√°genes con OpenAI")
    print(f"   URL de la API: {args.url}")
    
    # Probar conectividad
    if not test_api_connectivity(args.url):
        print("‚ùå No se pudo conectar con la API. Verificar que el servidor est√© en ejecuci√≥n.")
        sys.exit(1)
    
    # Probar conexi√≥n con OpenAI
    if not test_openai_connection(args.url):
        print("‚ö†Ô∏è La conexi√≥n con OpenAI fall√≥. La clasificaci√≥n de im√°genes podr√≠a no funcionar.")
    
    # Obtener categor√≠as disponibles
    categories = get_categories(args.url)
    if not categories:
        print("‚ö†Ô∏è No se pudieron obtener las categor√≠as disponibles.")
      # Clasificar imagen si se proporcion√≥ una
    if args.image:
        print(f"\nüñºÔ∏è Clasificando imagen: {args.image}")
        result = classify_image(args.url, args.image)
        if result:
            print("\n‚úÖ Clasificaci√≥n completa!")
    
    # Obtener estad√≠sticas si se solicitaron
    if args.stats:
        print(f"\nüìä Obteniendo estad√≠sticas de los √∫ltimos {args.days} d√≠as...")
        get_stats(args.url, args.days)
    
    # Si no se proporcion√≥ ninguna acci√≥n, mostrar ayuda
    if not args.image and not args.stats:
        print("\n‚ö†Ô∏è No se proporcion√≥ ninguna acci√≥n para realizar.")
        print("   Uso: python test_api.py --image ruta/a/la/imagen.jpg")
        print("   Uso: python test_api.py --stats [--days N]")

if __name__ == "__main__":
    main()
